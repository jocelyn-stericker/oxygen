on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache (rust)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            core/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        name: Cache (node)
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set version (ui)
        run: npm version 0.0.1-${{ github.sha }}
        working-directory: ./ui
      - name: Install deps (ubuntu)
        run: |
          sudo apt-get install -y libasound2-dev libportaudio2 jackd2 libjack-jackd2-0 libjack-jackd2-dev
        if: matrix.os == 'ubuntu-20.04'
      - name: Install LLVM and Clang (windows) # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@13d5d77cbf0bd7e35cb02a8f9ed4bb85bed3393b
        with:
          version: "12.0"
          directory: ${{ runner.temp }}/llvm
        if: matrix.os == 'windows-2019'
      - name: Set LIBCLANG_PATH (windows)
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-2019'
      - name: Install deps (windows)
        run: |
          net start audiosrv
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\PolicyManager\default\Privacy\LetAppsAccessMicrophone' -Name value -Value 1
          powershell sound-ci-helpers-windows/setup_sound.ps1

          Get-PnpDevice -Class AudioEndpoint | fl
          Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone'
          Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\PolicyManager\default\Privacy\LetAppsAccessMicrophone'
        if: matrix.os == 'windows-2019'
      - name: test (core)
        run: cargo test --release
        working-directory: ./core
      - name: clippy (core)
        run: cargo clippy
        working-directory: ./core
      - name: install dependencies (ui)
        run: npm ci
        working-directory: ./ui
      - name: test (ui)
        run: npm test
        working-directory: ./ui
        if: matrix.os != 'ubuntu-20.04'
      - name: test (ui, ubuntu)
        run: |
          jackd -r -d dummy &
          xvfb-run npm run dev:core-and-jest-with-jack
          echo OK
        working-directory: ./ui
        if: matrix.os == 'ubuntu-20.04'
      - name: make (ui)
        if: github.event_name == 'pull_request'
        run: npm run prod:make
        working-directory: ./ui
      - uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: Oxygen-${{matrix.os}}
          path: ui/out/make/**/*.zip
      - name: publish
        if: github.ref == 'refs/heads/main'
        run: npm run prod:publish
        working-directory: ./ui
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
